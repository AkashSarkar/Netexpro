#include<stdio.h>
#include<stdlib.h>
#include<math.h>

#include <windows.h>
//#include <glut.h>

#include <GL/glut.h>
#define pi (2*acos(0.0))

double cameraHeight;
double cameraAngle;
int drawgrid;
int drawaxes;
double angle,angle1,angle2,angle3,angle4,angle5;
int key_press;

struct point
{
	double x,y,z;
};


void drawAxes()
{
	if(drawaxes==1)
	{

		glBegin(GL_LINES);{
		    glColor3f(0, 1.0, 0);
			glVertex3f( 100,0,0);
			glVertex3f(-100,0,0);

			glColor3f(0, 0, 1.0);
			glVertex3f(0,-100,0);
			glVertex3f(0, 100,0);

			glColor3f(1.0, 1.0, 1.0);
			glVertex3f(0,0, 100);
			glVertex3f(0,0,-100);
		}glEnd();
	}
}


void drawGrid()
{
	int i;
	if(drawgrid==1)
	{
		glColor3f(0.6, 0.6, 0.6);	//grey
		glBegin(GL_LINES);{
			for(i=-8;i<=8;i++){

				if(i==0)
					continue;	//SKIP the MAIN axes

				//lines parallel to Y-axis
				glVertex3f(i*10, -90, 0);
				glVertex3f(i*10,  90, 0);

				//lines parallel to X-axis
				glVertex3f(-90, i*10, 0);
				glVertex3f( 90, i*10, 0);
			}
		}glEnd();
	}
}

void drawSquare(double a)
{
    //glColor3f(1.0,0.0,0.0);
	glBegin(GL_QUADS);{
		glVertex3f( a, a,0);
		glVertex3f( a,-a,0);
		glVertex3f(-a,-a,0);
		glVertex3f(-a, a,0);
	}glEnd();
}


void drawCircle(double radius)
{
    int i,segments=150;
    struct point points[200];
    glColor3f(0.7,0.7,0.7);
    //generate points
    for(i=0;i<=segments;i++)
    {
        points[i].x=radius*cos(((double)i/(double)segments)*2*pi);
        points[i].y=radius*sin(((double)i/(double)segments)*2*pi);
    }
    //draw segments using generated points
    for(i=0;i<segments;i++)
    {
        glBegin(GL_LINES);
        {
			glVertex3f(points[i].x,points[i].y,0);
			glVertex3f(points[i+1].x,points[i+1].y,0);
        }
        glEnd();
    }
}

void drawCylinder(double radius,double height)
{
    int segments=250;
    int i;
    struct point points1[300];
    struct point points2[300];
    glColor3f(0.7,0.7,0.7);
    //generate points
    for(i=0;i<=segments;i++)
    {
        points1[i].x=radius*cos(((double)i/(double)segments)*2*pi);
        points1[i].z=radius*sin(((double)i/(double)segments)*2*pi);
        points2[i].x=radius*cos(((double)i/(double)segments)*2*pi);
        points2[i].z=radius*sin(((double)i/(double)segments)*2*pi);
        points2[i].y=-height;
    }

    //draw segments using generated points
    for(i=0;i<segments;i++)
    {
        glBegin(GL_LINES);
        {
			glVertex3f(points1[i].x,0,points1[i].z);
			glVertex3f(points1[i+1].x,0,points1[i+1].z);

			glVertex3f(points2[i].x,-height,points2[i].z);
			glVertex3f(points2[i+1].x,-height,points2[i+1].z);

			glVertex3f(points1[i].x,0,points1[i].z);
			glVertex3f(points2[i].x,-height,points2[i].z);


        }
        glEnd();
    }

}


void drawCone(double radius,double height)
{
    int i,segments=100;
    double shade;
    struct point points[200];
    //generate points
    for(i=0;i<=segments;i++)
    {
        points[i].x=radius*cos(((double)i/(double)segments)*2*pi);
        points[i].y=radius*sin(((double)i/(double)segments)*2*pi);
    }
    //draw triangles using generated points
    for(i=0;i<segments;i++)
    {
        //create shading effect
        if(i<segments/2)shade=2*(double)i/(double)segments;
        else shade=2*(1.0-(double)i/(double)segments);
        glColor3f(shade,shade,shade);

        glBegin(GL_TRIANGLES);
        {
            glVertex3f(0,0,height);
			glVertex3f(points[i].x,points[i].y,0);
			glVertex3f(points[i+1].x,points[i+1].y,0);
        }
        glEnd();
    }
}


void drawSphere(double radius)
{
    int slices=100;
    int stacks=100;
	struct point points[200][200];
	int i,j;
	double h,r;
	//generate points
	for(i=0;i<=stacks;i++)
	{
		h=radius*sin(((double)i/(double)stacks)*(pi/2));
		r=radius*cos(((double)i/(double)stacks)*(pi/2));
		for(j=0;j<=slices;j++)
		{
			points[i][j].x=r*cos(((double)j/(double)slices)*2*pi);
			points[i][j].y=r*sin(((double)j/(double)slices)*2*pi);
			points[i][j].z=h;
		}
	}
	//draw quads using generated points
	for(i=0;i<stacks;i++)
	{
        glColor3f((double)i/(double)stacks,(double)i/(double)stacks,(double)i/(double)stacks);
		for(j=0;j<slices;j++)
		{
			glBegin(GL_QUADS);{
			    //upper hemisphere
				glVertex3f(points[i][j].x,points[i][j].y,points[i][j].z);
				glVertex3f(points[i][j+1].x,points[i][j+1].y,points[i][j+1].z);
				glVertex3f(points[i+1][j+1].x,points[i+1][j+1].y,points[i+1][j+1].z);
				glVertex3f(points[i+1][j].x,points[i+1][j].y,points[i+1][j].z);
                //lower hemisphere
                glVertex3f(points[i][j].x,points[i][j].y,-points[i][j].z);
				glVertex3f(points[i][j+1].x,points[i][j+1].y,-points[i][j+1].z);
				glVertex3f(points[i+1][j+1].x,points[i+1][j+1].y,-points[i+1][j+1].z);
				glVertex3f(points[i+1][j].x,points[i+1][j].y,-points[i+1][j].z);
			}glEnd();
		}
	}
}


void keyboardListener(unsigned char key, int x,int y){
	switch(key){

		case '1':
			key_press=1;
			break;
		case '2':
			key_press=2;
			break;

        case '3':
			key_press=3;
			break;

        case '4':
			key_press=4;
			break;

       case '5':
			key_press=5;
			break;

        case '6':
			key_press=6;
			break;


       case '7':
			key_press=7;
			break;

        case '8':
			key_press=8;
			break;


       case '9':
			key_press=9;
			break;

        case '0':
			key_press=0;
			break;

		default:
			break;
	}
}


void specialKeyListener(int key, int x,int y){
	switch(key){
		case GLUT_KEY_DOWN:		//down arrow key
			cameraHeight -= 3.0;
			break;
		case GLUT_KEY_UP:		// up arrow key
			cameraHeight += 3.0;
			break;

		case GLUT_KEY_RIGHT:
			cameraAngle += 0.03;
			break;
		case GLUT_KEY_LEFT:
			cameraAngle -= 0.03;
			break;

		case GLUT_KEY_PAGE_UP:
			break;
		case GLUT_KEY_PAGE_DOWN:
			break;

		case GLUT_KEY_INSERT:
			break;

		case GLUT_KEY_HOME:
			break;
		case GLUT_KEY_END:
			break;

		default:
			break;
	}
}


void mouseListener(int button, int state, int x, int y){	//x, y is the x-y of the screen (2D)
	switch(button){
		case GLUT_LEFT_BUTTON:
			if(state == GLUT_DOWN){		// 2 times?? in ONE click? -- solution is checking DOWN or UP
				drawaxes=1-drawaxes;
			}
			break;

		case GLUT_RIGHT_BUTTON:
			//........
			break;

		case GLUT_MIDDLE_BUTTON:
			//........
			break;

		default:
			break;
	}
}



void display(){

	//clear the display
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glClearColor(0,0,0,0);	//color black
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	/********************
	/ set-up camera here
	********************/
	//load the correct matrix -- MODEL-VIEW matrix
	glMatrixMode(GL_MODELVIEW);

	//initialize the matrix
	glLoadIdentity();



	//gluLookAt(100,100,100,	0,0,0,	0,0,1);
	gluLookAt(200*cos(cameraAngle), 200*sin(cameraAngle), cameraHeight,		0,0,0,		0,0,1);
	//gluLookAt(0,0,200,	0,0,0,	0,1,0);


	//again select MODEL-VIEW
	glMatrixMode(GL_MODELVIEW);


	/****************************
	/ Add your objects from here
	****************************/
	//add objects

	drawAxes();
//drawCone(30,40);



	 glPushMatrix();
	glColor3f(0,0.8,0.4);
	drawSquare(20);
	glPopMatrix();

//magenta
	 glPushMatrix();

    glColor3f(1.0,1.0,0.0);


	 if(key_press==1 && angle>-90)
    {
            angle=angle-5;

            key_press=-1;




    }
    else if(key_press==2 && angle<0)
    {
            angle=angle+5;

            key_press=-1;
            // printf("down-->%lf\n",angle);


    }

    glRotated(angle,0,1,0);



	drawSquare(20);

	glPopMatrix();

    //pink
    glPushMatrix();
   glColor3f(1.0,0.0,0.0);

    if(key_press==3 && angle1<90)
    {
            angle1=angle1+5;

            key_press=-1;


    }
    else if(key_press==4 && angle1>0)
    {
            angle1=angle1-5;

            key_press=-1;

    }
	glRotated(angle1,0,1,0);

	drawSquare(20);
    glPopMatrix();


     glPushMatrix();
     glColor3f(0.0,1.0,0.0);

	  if(key_press==5 && angle2<90)
    {
            angle2=angle2+5;

            key_press=-1;


    }
    else if(key_press==6 && angle2>0)
    {
            angle2=angle2-5;

            key_press=-1;

    }
	glRotated(angle2,1,0,0);

	drawSquare(20);
    glPopMatrix();




    glPushMatrix();

      glColor3f(0.0,0.0,1.0);

      if(key_press==7 && angle3>-90)
    {
            angle3=angle3-5;

            key_press=-1;


    }

    else if(key_press==8 && angle3<0)
    {
            angle3=angle3+5;

            key_press=-1;

    }

    glRotated(angle3,1,0,0);

	drawSquare(20);


     glColor3f(0.0,1.0,1.0);

      if(key_press==9 && angle4>-90)
    {

            angle4=angle4-5;
            key_press=-1;
              printf("up-->%lf\n",angle4);

    }

    else if(key_press==0 && angle4<0)
    {

            angle4=angle4+5;
            key_press=-1;
              printf("up-->%lf\n",angle4);

    }



    glRotated(angle4,1,0,0);

	drawSquare(20);

    glPopMatrix();




}
void init(){
	//codes for initialization
	drawgrid=0;
	drawaxes=1;
	cameraHeight=150.0;
	cameraAngle=1.0;
	angle=0;
	angle1=0;
	angle2=0;
	angle3=0;
	angle4=0;
	angle5=0;

	key_press=-1;

	//clear the screen
	glClearColor(0,0,0,0);

	/************************
	/ set-up projection here
	************************/
	//load the PROJECTION matrix
	glMatrixMode(GL_PROJECTION);

	//initialize the matrix
	glLoadIdentity();

	//give PERSPECTIVE parameters
	gluPerspective(80,	1,	1,	1000.0);
	//field of view in the Y (vertically)
	//aspect ratio that determines the field of view in the X direction (horizontally)
	//near distance
	//far distance
}

int main(int argc, char **argv){
	glutInit(&argc,argv);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(0, 0);
	glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGB);	//Depth, Double buffer, RGB color

	glutCreateWindow("My OpenGL Program");

	init();

	glEnable(GL_DEPTH_TEST);	//enable Depth Testing

	glutDisplayFunc(display);	//display callback function
	//glutIdleFunc(animate);		//what you want to do in the idle time (when no drawing is occuring)

	glutKeyboardFunc(keyboardListener);
	glutSpecialFunc(specialKeyListener);
	glutMouseFunc(mouseListener);

	glutMainLoop();		//The main loop of OpenGL

	return 0;
}
